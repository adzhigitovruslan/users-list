"use strict";(self["webpackChunkusers_list"]=self["webpackChunkusers_list"]||[]).push([[833],{9833:function(t,s,e){e.r(s),e.d(s,{default:function(){return y}});var i=function(){var t=this,s=t._self._c;return s("div",{staticClass:"post-wrapper"},[s("UserDetailPosts",{attrs:{post:t.post,isCreating:""},on:{"create-post":t.createPost}}),t._l(t.getUserPosts,(function(t){return s("UserDetailPosts",{key:t.id,attrs:{post:t}})}))],2)},a=[],o=function(){var t=this,s=t._self._c;return s("div",[s("base-card",{staticClass:"detail-wrapper"},[s("div",{staticClass:"detail-page"},[s("div",{staticClass:"detail-page__title-wrapper"},[t.isEditing||t.isCreating?t._e():s("div",{staticClass:"detail-page__title"},[s("div",[t._v(t._s(t.postData.title))])]),t.isEditing||t.isCreating?s("input",{directives:[{name:"model",rawName:"v-model",value:t.postData.title,expression:"postData.title"}],staticClass:"detail-page__title",attrs:{placeholder:"enter title"},domProps:{value:t.postData.title},on:{input:function(s){s.target.composing||t.$set(t.postData,"title",s.target.value)}}}):t._e(),t.isCreating?s("button",{on:{click:t.createPost}},[t._v("create")]):s("button",{on:{click:function(s){return t.updatePost(t.isEditing)}}},[t._v(t._s(t.isEditing?"save":"edit"))])]),t.isEditing||t.isCreating?t._e():s("div",{staticClass:"detail-page__body"},[t._v(t._s(t.postData.body))]),t.isEditing||t.isCreating?s("textarea",{directives:[{name:"model",rawName:"v-model",value:t.postData.body,expression:"postData.body"}],attrs:{name:"",id:"",cols:"30",rows:"10",placeholder:"enter text..."},domProps:{value:t.postData.body},on:{input:function(s){s.target.composing||t.$set(t.postData,"body",s.target.value)}}}):t._e()])])],1)},r=[],n={name:"UserDetailPosts",props:{post:{type:Object,default:()=>{}},isCreating:{type:Boolean,default:!1}},emits:["create-post"],data(){return{postData:{id:this.post.id,title:this.post.title,body:this.post.body,userId:this.post.userId},isEditing:!1}},methods:{async updatePost(t){if(t)try{const t=await fetch("https://jsonplaceholder.typicode.com/posts/"+this.post.id,{method:"PUT",body:JSON.stringify(this.postData),headers:{"Content-type":"application/json; charset=UTF-8"}});if(500===t.status)return void this.$toast.error("Newly created post can't be updated due to 'JSONPlaceholder' settings");const s=await t.json();this.postData=s,this.$toast.success("Post successfully edited"),this.isEditing=!this.isEditing}catch(s){console.log(s,"err"),this.$toast.error("Something went wrong"),this.isEditing=!this.isEditing}else this.isEditing=!this.isEditing},async createPost(){if(this.postData.title&&this.postData.body)try{const t=await fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",body:JSON.stringify(this.postData),headers:{"Content-type":"application/json; charset=UTF-8"}}),s=await t.json();this.$toast.success("Post successfully created"),this.postData={id:"",title:"",body:"",userId:""},this.$emit("create-post",s)}catch(t){console.log(t),this.$toast.error("Something went wrong"),this.isEditing=!this.isEditing}}}},d=n,l=e(1001),c=(0,l.Z)(d,o,r,!1,null,"3322c057",null),p=c.exports,u={name:"UserPostsPage",props:{id:{type:String,default:""}},components:{UserDetailPosts:p},data(){return{userPosts:[],post:{title:"",body:"",userId:1}}},computed:{getUserPosts(){return this.userPosts}},mounted(){this.getUserDetailPosts()},methods:{async getUserDetailPosts(){try{const t=await fetch("https://jsonplaceholder.typicode.com/users/"+this.id+"/posts"),s=await t.json();this.userPosts=s}catch(t){console.log("Error:",t)}},async createPost(t){this.userPosts.unshift(t)}}},h=u,g=(0,l.Z)(h,i,a,!1,null,"35ad0b14",null),y=g.exports}}]);
//# sourceMappingURL=833.b5e47b39.js.map